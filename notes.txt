pwd
	lists present working directory

ls
	directory listing

cd
	change directory

mkdir [directory_name]
	make new directory with name directory_name

touch [file.extension]
	creates a file

GIT STUFF

git init
	Used to create a new Git repository

git status
	Tells us the status of our working directory
	Compares the difference between working dir and staging area
	Also compares the difference between staging area and repo

.gitignore
	Tells git that it should completely ignore a certain file

git add [file]
	Tells git to start tracking files or folders

git commit
	Commits changes to the repository

git log
	Shows us all the commits that were made

git log --oneline
	Shows us all the commits in oneline

git diff <old> <new>
	Shows us what has changed between any 2 commits

git diff 
	Shows us what has changed between our working directory and staging area

git add -p
	Lets us selectively stage changes

git reset --hard
	Destroys the entire working directory so that it matches with the staging area. Therefore any changes that are not staged will be destroyed
	
HEAD is a label for the commit we are currently at

git checkout <branch/commit/etc>
	switches to that branch/commit/etc --> puts that into that working directory

git revert <commit>
	Reverses that commit by making another opposite commit

Branches - parallel universes where we can work on different things in isolation

git branch
	gives a list of all branches in the repository

git branch <branch_name>
	creates a new branch

To merge changes made on another bracnh into the current one, we use git merge <branch_name>

git merge <branch_name>
	merge changes on <branch_name> into current branch
	
git remote add origin [url]
	Adds a git remote with name origin

git push [remote] [branch]
	Pushes commits on [branch] to [remove] server

git pull [remote] [branch]
	Pulls commits on [remote] to our local [branch]

git clone [url]
	Clones git reposiroty from remote [url] to your local machine